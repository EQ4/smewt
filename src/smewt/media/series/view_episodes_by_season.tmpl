#set series = $series

<%
from itertools import groupby
from collections import defaultdict
from smewt import SmewtUrl, Media
from smewt.media import Episode, Series, Subtitle
from smewt.base.utils import smewtDirectory, guessCountryCode
from smewt.base import SmewtException

import os, os.path
flags_dir = smewtDirectory('smewt', 'media', 'common', 'images', 'flags')
seasons = defaultdict(lambda: [])

#allseries = eps.findAll(type = Series)
#if len(allseries) == 0:
#    return '<html><body><h1>No media could be found for this media.  Check that the folder where these medias live is accessible.</h1></body></html>'

#series = allseries[0]
seriesName = series.title
poster = series.get('loresImage')
englishSubsLink = SmewtUrl('action', 'getsubtitles', { 'title': seriesName, 'language': 'en' })
frenchSubsLink = SmewtUrl('action', 'getsubtitles', { 'title': seriesName, 'language': 'fr' })
spanishSubsLink = SmewtUrl('action', 'getsubtitles', { 'title': seriesName, 'language': 'es' })

# First prepare the episodes
episodes = {}

'''
# HACK: we should really have a good schema so that I could do
# episode.media.filename becuase currently I sort the medias by
# type so that we first process the videos and then the subtitles
for media in eps.findAll(type = Media):
    if media.type() == 'video':
        meta = media.metadata[0].toDict()
    elif media.type() == 'subtitle':
        meta = media.metadata[0]['metadata'].toDict()

    md = episodes.setdefault( (meta['season'], meta['episodeNumber']), defaultdict(lambda:None)  )
    md.update( meta )
    md.setdefault('subtitleUrls', [])

    if media.type() == 'video':
        md['filename'] = media.filename
        md['url'] = SmewtUrl('action', 'play', { 'filename1': media.filename })

    elif media.type() == 'subtitle':
        #langs = [ s['language'] for s in eps.findAll(type = Subtitle,
        #                                             metadata = media.metadata[0]['metadata']) ]
        #langs = guessCountryCode(media.filename)
        try:
            mediaFilename = eps.findOne(type = Media,
                                        select = lambda x: x.metadata[0] == media.metadata[0]['metadata']).filename
            subtitleFilename = media.filename

            for sub in media.metadata:
                md.setdefault('subtitleUrls', []).append( {'languageImage': flags_dir + '/%s.png' % (sub['language'],),
                              'url': SmewtUrl('action', 'play', { 'filename1': mediaFilename, 'subtitle1': subtitleFilename })} )

            md['numSubtitles'] = len(md['subtitleUrls'])
        except SmewtException:
            pass

for md in episodes.values():
    md['subtitleUrls'].sort(key = lambda x: x['languageImage'])
    seasons[ md['season'] ].append( md )

for season, eps in seasons.items():
    seasons[ season ] = sorted(eps, key = lambda x: x['episodeNumber'])
'''

for ep in series.episodes:
    md = dict(ep.literalItems())
    md['filename'] = ep.files.filename
    md['url'] = SmewtUrl('action', 'play', { 'filename1': md['filename'] })
    episodes[(ep.season, ep.episodeNumber)] = md

for md in episodes.values():
    seasons[ md['season'] ].append( md )

for season, eps in seasons.items():
    seasons[season] = sorted(eps, key = lambda x: x['episodeNumber'])


import_dir = smewtDirectory('smewt', 'media')
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>single serie display</title>
<script type="text/javascript" src="file://$(import_dir)/thirdparty/tabber.js"></script>
<script type="text/javascript" src="file://$(import_dir)/thirdparty/styler.js"></script>
<link rel="stylesheet" href="file://$(import_dir)/series/series.css" type="text/css">
</head>

<body>

<img src="file://$poster" />

<div class="rightshifted">
  <h1>$seriesName</h1>

  <a href="$englishSubsLink">Get missing English subtitles</a>
  <a href="$frenchSubsLink">Get missing French subtitles</a>
  <a href="$spanishSubsLink">Get missing Spanish subtitles</a>
  <a href="javascript:toggleByName('synopsis')">Toggle synopsis</a>
</div>

<div class="tabber">
#for seasonNumber, eps in seasons.items():
  <div class="tabbertab">
  <h2>Season $seasonNumber</h2>
  <p>
  #for ep in [ ep for ep in eps if 'title' in ep ]
    #if 'filename' in ep:
      #try
        <div class="episode"><a href="$ep.url">$ep.episodeNumber - $ep.title </a>
      #except
        <div class="episode"> ? - $ep.title
      #end try

      #if 'subtitleUrls' in ep
          #for s in ep['subtitleUrls']
               <a href="$s.url"><img src="file://$s.languageImage" /></a>
          #end for
      #end if

      #if 'synopsis' in ep:
        <div name="synopsis" style="display:none"><p>$ep.synopsis</p></div>
      #end if
      </div>
    #end if
  #end for

<%
import os.path
extras = [ ep for ep in eps if 'title' not in ep and ep['filename'] is not None ]
for ep in extras:
    ep['title'] = os.path.basename(ep['filename'])
%>

  #if extras
    <div class="extras">Extras / Untitled / Metadata unknown</div>
  #end if
  #for ep in extras
    <div class="episode"><a href="$ep.url"><i>$ep.title</i></a></div>
  #end for
  </p></div>
#end for

</body>
</html>
